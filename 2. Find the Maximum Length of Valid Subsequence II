/* You are given an integer array nums and a positive integer k.
A subsequence sub of nums with length x is called valid if it satisfies:
(sub[0] + sub[1]) % k == (sub[1] + sub[2]) % k == ... == (sub[x - 2] + sub[x - 1]) % k.
Return the length of the longest valid subsequence of nums.*/

class Solution {
  public int maximumLength(int[] nums, int k) {
    int[][] dp = new int[k][k];
    for (final int x : nums)
      for (int y = 0; y < k; ++y)
        dp[x % k][y] = dp[y][x % k] + 1;
    return Arrays.stream(dp).flatMapToInt(Arrays::stream).max().getAsInt();
  }
}
